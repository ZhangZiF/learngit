创建版本库：
git init ：命令把这个目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
	
git add ：告诉Git，把文件添加到仓库：
	$ git add readme.txt
	
git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a readme file"
	[master (root-commit) eaadf4e] wrote a readme file
	 1 file changed, 2 insertions(+)
	 create mode 100644 readme.txt
	 
git log ：命令显示从最近到最远的提交日志

在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
$ git reset --hard HEAD^ ：回退到上一个版本
git reset --hard commit_id ：回退到指定版本  例如：$ git reset --hard 1094a
git reflog ：查看命令历史，以便确定要回到未来的哪个版本

每次修改，如果不用git add到暂存区，那就不会加入到commit中
git add ：把文件从工作区>>>>暂存区，git commit把文件从暂存区>>>>仓库，

git diff ：查看工作区和暂存区差异，

git diff --cached ：查看暂存区和仓库差异，

git diff HEAD  ：查看工作区和仓库的差异，

git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，

git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令$ git restore --staged <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
git rm : 删除文件
git restore <file> : 从添加到版本库中恢复被删除的文件

关联一个远程库，使用命令 git remote add origin git@server-name:path/repo-name.git
关联后，使用命令 git push -u origin master 第一次推送master分支的所有内容

要克隆一个仓库，首先必须知道仓库的地址，然后使用 git clone 命令克隆 支持 https 和 ssh 两种协议 但ssh协议速度最快

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作的工作模式通常是这样：
首先，可以试图用 git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用 git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream-to <branch-name> origin/<branch-name>。

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。

git push origin <tagname> ：可以推送一个本地标签；
git push origin --tags ：可以推送全部未推送过的本地标签；
git tag -d <tagname> ：可以删除一个本地标签；
git push origin :refs/tags/<tagname> ：可以删除一个远程标签。

忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！